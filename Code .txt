import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import pandas as pd
from sklearn import metrics
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
import catboost as cb
from catboost import CatBoostClassifier

pathToTSV = ('dataset.tsv')

data = pd.read_table(pathToTSV, header=None, names = ['polarity','review'])
print(data)
data['polarity_num'] = data.polarity.map({'N':0, 'P':1, 'O':2})
X=data.review
y=data.polarity_num
y=y.replace(np.nan,0)

vect = CountVectorizer(ngram_range=(1,1))
k_range = list(range(1, 31))
print(k_range)




for k in k_range:
   
    X_train_dta,X_test_dta,y_train_dta,y_test_dta = train_test_split(X,y,test_size=0.4, random_state=k)

    vect.fit(X_train_dta) 
    X_train_mtd = vect.transform(X_train_dta) 
    X_test_mtd = vect.transform(X_test_dta) 
    
   
    KNearneighbor_scores = []
        
    knncodeA = KNeighborsClassifier(n_neighbors=3)
    knncodeA.fit(X_train_mtd, y_train_dta)
    y_knnA_pred = knncodeA.predict(X_test_mtd)
    KNearneighbor_scores.append(metrics.accuracy_score(y_test_dta, y_knnA_pred))
        
   
    randomforest_scores = []
 
    rfcodeA = RandomForestClassifier(n_jobs=2, random_state=0)
    rfcodeA.fit(X_train_mtd, y_train_dta)
    rforestA_g = rfcodeA.predict(X_test_mtd)
    randomforest_scores.append(metrics.accuracy_score(y_test_dta, rforestA_g))

    catboost_scores = []  
    model = CatBoostClassifier()
    
    model.fit(X_train_mtd, y_train_dta)
    
    y_pred = model.predict(X_test_mtd)
    
    catboost_scores.append(metrics.accuracy_score(y_test_dta, y_pred))


        
    


print('Nearest neighbour macro', np.array(KNearneighbor_scores).mean())

print('Random Forest macro', np.array(randomforest_scores).mean())

print('catboost' , np.array(SGradientDescent_scores).mean())
